#summary A JVM/.NET language

= Introduction =

Someone really needs to invent a practical (and therefore pure, lazy) language for the JVM et. al.


= Details =

Compiler written in Haskell

Haskell-like syntax
  * In do-notation and bindings, swap <- for = and swap = for {} except with a source file level pragma
  * Target .NET and supply supporting DLL (and JAR)
  * Three versions of String literals
    * Typical array-based
    * Finger-tree based
    * Lazy list based
  * Applicative comprehensions (two versions)
    * [| f a b |]
    * Using a keyword ap: ap { x <- f; y <- a; z <- b; pure (f a b) }
  * Comonad comprehensions (codo or co keyword)
  * Arrow syntax http://www.haskell.org/arrows/syntax.html
  * Correct type-class hierarchy
    * (.) :: (Functor f) => f a -> (a -> b) -> f b
    * Functor <- Pointed <- Applicative <- Monad
    * MonadOr and MonadPlus distinction
    * Semigroup < - Monoid
    * others?
  * Parallel libraries
  * Strictness annotations available in many places e.g. function arguments, data type constructor arguments
  * FFI inside a ST-like type constructor distinguishing between .NET and Java. With unsafe available.
  * Provide accessible libraries to compiler tools so that decent build scripts can be written.
  * (?)Translate Haskell syntax for target compilation
  * Functional Dependencies
  * Other GHC type system extensions(?)
  * Pattern guards
    * http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#pattern-guards
    * http://research.microsoft.com/~simonpj/Haskell/guards.html
  * Tuple Sections
    * http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#tuple-sections
  * (Many) other GHC syntax extensions.