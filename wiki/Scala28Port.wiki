#summary Scala 2.8 Bugs that affect Scalaz

== Bugs ==

  * "regression 2.8 Existential type error: "kinds of the type arguments (?) do not conform to the expected kinds of the type parameters (type A) in trait T." - http://lampsvn.epfl.ch/trac/scala/ticket/2308
  * Kind of java classes is incorrect - http://lampsvn.epfl.ch/trac/scala/ticket/2454
  * Projection Type doesn't survive pickling/unpickling (regression): "reference type B of type Apply refers to nonexisting symbol." - http://lampsvn.epfl.ch/trac/scala/ticket/2482

== Language / Library Changes ==

Once we sidestep the bugs, there are some new features to use.

  * `def foo[B](implicit zb: Z[B]) => def foo[B: Z]`. We can use this for Semigroup, Show, etc.
  * Can we use `Predef.<:<` anywhere? It works like this: https://gist.github.com/0f636f6209a4db1d51d4  . See recent changes made to Option and Either in the standard library: https://lampsvn.epfl.ch/trac/scala/changeset/19364
  * `scala.Zero` introduced. Will it last?
  * Type Constructor Polymorphism Inference: https://lampsvn.epfl.ch/trac/scala/changeset/19245
  * Implicits can be de-prioritized by placing then in a supertype. e.g `Predef extends LowPriorityImplicits`.
  * new collections library -- check coverage of our type class instances.
  * equality can o' worms. A good selling point for `Identity.===`, perhaps :) http://article.gmane.org/gmane.comp.lang.scala.internals/1894